// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.pitagora/pkg/ent/macro"
	"github.pitagora/pkg/ent/predicate"
)

// MacroUpdate is the builder for updating Macro entities.
type MacroUpdate struct {
	config
	hooks    []Hook
	mutation *MacroMutation
}

// Where appends a list predicates to the MacroUpdate builder.
func (mu *MacroUpdate) Where(ps ...predicate.Macro) *MacroUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MacroUpdate) SetDescription(s string) *MacroUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MacroUpdate) SetNillableDescription(s *string) *MacroUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// SetMetadata sets the "metadata" field.
func (mu *MacroUpdate) SetMetadata(s string) *MacroUpdate {
	mu.mutation.SetMetadata(s)
	return mu
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (mu *MacroUpdate) SetNillableMetadata(s *string) *MacroUpdate {
	if s != nil {
		mu.SetMetadata(*s)
	}
	return mu
}

// SetCode sets the "code" field.
func (mu *MacroUpdate) SetCode(s string) *MacroUpdate {
	mu.mutation.SetCode(s)
	return mu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mu *MacroUpdate) SetNillableCode(s *string) *MacroUpdate {
	if s != nil {
		mu.SetCode(*s)
	}
	return mu
}

// Mutation returns the MacroMutation object of the builder.
func (mu *MacroUpdate) Mutation() *MacroMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MacroUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MacroUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MacroUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MacroUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MacroUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(macro.Table, macro.Columns, sqlgraph.NewFieldSpec(macro.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(macro.FieldDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.Metadata(); ok {
		_spec.SetField(macro.FieldMetadata, field.TypeString, value)
	}
	if value, ok := mu.mutation.Code(); ok {
		_spec.SetField(macro.FieldCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{macro.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MacroUpdateOne is the builder for updating a single Macro entity.
type MacroUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MacroMutation
}

// SetDescription sets the "description" field.
func (muo *MacroUpdateOne) SetDescription(s string) *MacroUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MacroUpdateOne) SetNillableDescription(s *string) *MacroUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// SetMetadata sets the "metadata" field.
func (muo *MacroUpdateOne) SetMetadata(s string) *MacroUpdateOne {
	muo.mutation.SetMetadata(s)
	return muo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (muo *MacroUpdateOne) SetNillableMetadata(s *string) *MacroUpdateOne {
	if s != nil {
		muo.SetMetadata(*s)
	}
	return muo
}

// SetCode sets the "code" field.
func (muo *MacroUpdateOne) SetCode(s string) *MacroUpdateOne {
	muo.mutation.SetCode(s)
	return muo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (muo *MacroUpdateOne) SetNillableCode(s *string) *MacroUpdateOne {
	if s != nil {
		muo.SetCode(*s)
	}
	return muo
}

// Mutation returns the MacroMutation object of the builder.
func (muo *MacroUpdateOne) Mutation() *MacroMutation {
	return muo.mutation
}

// Where appends a list predicates to the MacroUpdate builder.
func (muo *MacroUpdateOne) Where(ps ...predicate.Macro) *MacroUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MacroUpdateOne) Select(field string, fields ...string) *MacroUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Macro entity.
func (muo *MacroUpdateOne) Save(ctx context.Context) (*Macro, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MacroUpdateOne) SaveX(ctx context.Context) *Macro {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MacroUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MacroUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MacroUpdateOne) sqlSave(ctx context.Context) (_node *Macro, err error) {
	_spec := sqlgraph.NewUpdateSpec(macro.Table, macro.Columns, sqlgraph.NewFieldSpec(macro.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Macro.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, macro.FieldID)
		for _, f := range fields {
			if !macro.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != macro.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(macro.FieldDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.Metadata(); ok {
		_spec.SetField(macro.FieldMetadata, field.TypeString, value)
	}
	if value, ok := muo.mutation.Code(); ok {
		_spec.SetField(macro.FieldCode, field.TypeString, value)
	}
	_node = &Macro{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{macro.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
