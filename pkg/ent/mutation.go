// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.pitagora/pkg/ent/automation"
	"github.pitagora/pkg/ent/macro"
	"github.pitagora/pkg/ent/predicate"
	"github.pitagora/pkg/ent/procedure"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAutomation = "Automation"
	TypeMacro      = "Macro"
	TypeProcedure  = "Procedure"
)

// AutomationMutation represents an operation that mutates the Automation nodes in the graph.
type AutomationMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	description   *string
	trigger       *string
	manifest      *string
	enabled       *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Automation, error)
	predicates    []predicate.Automation
}

var _ ent.Mutation = (*AutomationMutation)(nil)

// automationOption allows management of the mutation configuration using functional options.
type automationOption func(*AutomationMutation)

// newAutomationMutation creates new mutation for the Automation entity.
func newAutomationMutation(c config, op Op, opts ...automationOption) *AutomationMutation {
	m := &AutomationMutation{
		config:        c,
		op:            op,
		typ:           TypeAutomation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAutomationID sets the ID field of the mutation.
func withAutomationID(id int64) automationOption {
	return func(m *AutomationMutation) {
		var (
			err   error
			once  sync.Once
			value *Automation
		)
		m.oldValue = func(ctx context.Context) (*Automation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Automation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAutomation sets the old Automation of the mutation.
func withAutomation(node *Automation) automationOption {
	return func(m *AutomationMutation) {
		m.oldValue = func(context.Context) (*Automation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AutomationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AutomationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Automation entities.
func (m *AutomationMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AutomationMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AutomationMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Automation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AutomationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AutomationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Automation entity.
// If the Automation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AutomationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AutomationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *AutomationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AutomationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Automation entity.
// If the Automation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AutomationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AutomationMutation) ResetDescription() {
	m.description = nil
}

// SetTrigger sets the "trigger" field.
func (m *AutomationMutation) SetTrigger(s string) {
	m.trigger = &s
}

// Trigger returns the value of the "trigger" field in the mutation.
func (m *AutomationMutation) Trigger() (r string, exists bool) {
	v := m.trigger
	if v == nil {
		return
	}
	return *v, true
}

// OldTrigger returns the old "trigger" field's value of the Automation entity.
// If the Automation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AutomationMutation) OldTrigger(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrigger is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrigger requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrigger: %w", err)
	}
	return oldValue.Trigger, nil
}

// ResetTrigger resets all changes to the "trigger" field.
func (m *AutomationMutation) ResetTrigger() {
	m.trigger = nil
}

// SetManifest sets the "manifest" field.
func (m *AutomationMutation) SetManifest(s string) {
	m.manifest = &s
}

// Manifest returns the value of the "manifest" field in the mutation.
func (m *AutomationMutation) Manifest() (r string, exists bool) {
	v := m.manifest
	if v == nil {
		return
	}
	return *v, true
}

// OldManifest returns the old "manifest" field's value of the Automation entity.
// If the Automation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AutomationMutation) OldManifest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManifest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManifest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManifest: %w", err)
	}
	return oldValue.Manifest, nil
}

// ResetManifest resets all changes to the "manifest" field.
func (m *AutomationMutation) ResetManifest() {
	m.manifest = nil
}

// SetEnabled sets the "enabled" field.
func (m *AutomationMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *AutomationMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the Automation entity.
// If the Automation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AutomationMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *AutomationMutation) ResetEnabled() {
	m.enabled = nil
}

// Where appends a list predicates to the AutomationMutation builder.
func (m *AutomationMutation) Where(ps ...predicate.Automation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AutomationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AutomationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Automation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AutomationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AutomationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Automation).
func (m *AutomationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AutomationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, automation.FieldName)
	}
	if m.description != nil {
		fields = append(fields, automation.FieldDescription)
	}
	if m.trigger != nil {
		fields = append(fields, automation.FieldTrigger)
	}
	if m.manifest != nil {
		fields = append(fields, automation.FieldManifest)
	}
	if m.enabled != nil {
		fields = append(fields, automation.FieldEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AutomationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case automation.FieldName:
		return m.Name()
	case automation.FieldDescription:
		return m.Description()
	case automation.FieldTrigger:
		return m.Trigger()
	case automation.FieldManifest:
		return m.Manifest()
	case automation.FieldEnabled:
		return m.Enabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AutomationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case automation.FieldName:
		return m.OldName(ctx)
	case automation.FieldDescription:
		return m.OldDescription(ctx)
	case automation.FieldTrigger:
		return m.OldTrigger(ctx)
	case automation.FieldManifest:
		return m.OldManifest(ctx)
	case automation.FieldEnabled:
		return m.OldEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown Automation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AutomationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case automation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case automation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case automation.FieldTrigger:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrigger(v)
		return nil
	case automation.FieldManifest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManifest(v)
		return nil
	case automation.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown Automation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AutomationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AutomationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AutomationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Automation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AutomationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AutomationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AutomationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Automation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AutomationMutation) ResetField(name string) error {
	switch name {
	case automation.FieldName:
		m.ResetName()
		return nil
	case automation.FieldDescription:
		m.ResetDescription()
		return nil
	case automation.FieldTrigger:
		m.ResetTrigger()
		return nil
	case automation.FieldManifest:
		m.ResetManifest()
		return nil
	case automation.FieldEnabled:
		m.ResetEnabled()
		return nil
	}
	return fmt.Errorf("unknown Automation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AutomationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AutomationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AutomationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AutomationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AutomationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AutomationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AutomationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Automation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AutomationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Automation edge %s", name)
}

// MacroMutation represents an operation that mutates the Macro nodes in the graph.
type MacroMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	description   *string
	metadata      *string
	code          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Macro, error)
	predicates    []predicate.Macro
}

var _ ent.Mutation = (*MacroMutation)(nil)

// macroOption allows management of the mutation configuration using functional options.
type macroOption func(*MacroMutation)

// newMacroMutation creates new mutation for the Macro entity.
func newMacroMutation(c config, op Op, opts ...macroOption) *MacroMutation {
	m := &MacroMutation{
		config:        c,
		op:            op,
		typ:           TypeMacro,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMacroID sets the ID field of the mutation.
func withMacroID(id int64) macroOption {
	return func(m *MacroMutation) {
		var (
			err   error
			once  sync.Once
			value *Macro
		)
		m.oldValue = func(ctx context.Context) (*Macro, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Macro.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMacro sets the old Macro of the mutation.
func withMacro(node *Macro) macroOption {
	return func(m *MacroMutation) {
		m.oldValue = func(context.Context) (*Macro, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MacroMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MacroMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Macro entities.
func (m *MacroMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MacroMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MacroMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Macro.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MacroMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MacroMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Macro entity.
// If the Macro object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MacroMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MacroMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *MacroMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MacroMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Macro entity.
// If the Macro object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MacroMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MacroMutation) ResetDescription() {
	m.description = nil
}

// SetMetadata sets the "metadata" field.
func (m *MacroMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *MacroMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Macro entity.
// If the Macro object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MacroMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *MacroMutation) ResetMetadata() {
	m.metadata = nil
}

// SetCode sets the "code" field.
func (m *MacroMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *MacroMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Macro entity.
// If the Macro object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MacroMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *MacroMutation) ResetCode() {
	m.code = nil
}

// Where appends a list predicates to the MacroMutation builder.
func (m *MacroMutation) Where(ps ...predicate.Macro) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MacroMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MacroMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Macro, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MacroMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MacroMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Macro).
func (m *MacroMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MacroMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, macro.FieldName)
	}
	if m.description != nil {
		fields = append(fields, macro.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, macro.FieldMetadata)
	}
	if m.code != nil {
		fields = append(fields, macro.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MacroMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case macro.FieldName:
		return m.Name()
	case macro.FieldDescription:
		return m.Description()
	case macro.FieldMetadata:
		return m.Metadata()
	case macro.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MacroMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case macro.FieldName:
		return m.OldName(ctx)
	case macro.FieldDescription:
		return m.OldDescription(ctx)
	case macro.FieldMetadata:
		return m.OldMetadata(ctx)
	case macro.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown Macro field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MacroMutation) SetField(name string, value ent.Value) error {
	switch name {
	case macro.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case macro.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case macro.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case macro.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown Macro field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MacroMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MacroMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MacroMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Macro numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MacroMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MacroMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MacroMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Macro nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MacroMutation) ResetField(name string) error {
	switch name {
	case macro.FieldName:
		m.ResetName()
		return nil
	case macro.FieldDescription:
		m.ResetDescription()
		return nil
	case macro.FieldMetadata:
		m.ResetMetadata()
		return nil
	case macro.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown Macro field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MacroMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MacroMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MacroMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MacroMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MacroMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MacroMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MacroMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Macro unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MacroMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Macro edge %s", name)
}

// ProcedureMutation represents an operation that mutates the Procedure nodes in the graph.
type ProcedureMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	description   *string
	metadata      *string
	manifest      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Procedure, error)
	predicates    []predicate.Procedure
}

var _ ent.Mutation = (*ProcedureMutation)(nil)

// procedureOption allows management of the mutation configuration using functional options.
type procedureOption func(*ProcedureMutation)

// newProcedureMutation creates new mutation for the Procedure entity.
func newProcedureMutation(c config, op Op, opts ...procedureOption) *ProcedureMutation {
	m := &ProcedureMutation{
		config:        c,
		op:            op,
		typ:           TypeProcedure,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcedureID sets the ID field of the mutation.
func withProcedureID(id int64) procedureOption {
	return func(m *ProcedureMutation) {
		var (
			err   error
			once  sync.Once
			value *Procedure
		)
		m.oldValue = func(ctx context.Context) (*Procedure, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Procedure.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcedure sets the old Procedure of the mutation.
func withProcedure(node *Procedure) procedureOption {
	return func(m *ProcedureMutation) {
		m.oldValue = func(context.Context) (*Procedure, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcedureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcedureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Procedure entities.
func (m *ProcedureMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcedureMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcedureMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Procedure.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProcedureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProcedureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Procedure entity.
// If the Procedure object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcedureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProcedureMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProcedureMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProcedureMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Procedure entity.
// If the Procedure object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcedureMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProcedureMutation) ResetDescription() {
	m.description = nil
}

// SetMetadata sets the "metadata" field.
func (m *ProcedureMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *ProcedureMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Procedure entity.
// If the Procedure object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcedureMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *ProcedureMutation) ResetMetadata() {
	m.metadata = nil
}

// SetManifest sets the "manifest" field.
func (m *ProcedureMutation) SetManifest(s string) {
	m.manifest = &s
}

// Manifest returns the value of the "manifest" field in the mutation.
func (m *ProcedureMutation) Manifest() (r string, exists bool) {
	v := m.manifest
	if v == nil {
		return
	}
	return *v, true
}

// OldManifest returns the old "manifest" field's value of the Procedure entity.
// If the Procedure object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcedureMutation) OldManifest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManifest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManifest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManifest: %w", err)
	}
	return oldValue.Manifest, nil
}

// ResetManifest resets all changes to the "manifest" field.
func (m *ProcedureMutation) ResetManifest() {
	m.manifest = nil
}

// Where appends a list predicates to the ProcedureMutation builder.
func (m *ProcedureMutation) Where(ps ...predicate.Procedure) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProcedureMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProcedureMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Procedure, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProcedureMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProcedureMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Procedure).
func (m *ProcedureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcedureMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, procedure.FieldName)
	}
	if m.description != nil {
		fields = append(fields, procedure.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, procedure.FieldMetadata)
	}
	if m.manifest != nil {
		fields = append(fields, procedure.FieldManifest)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcedureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case procedure.FieldName:
		return m.Name()
	case procedure.FieldDescription:
		return m.Description()
	case procedure.FieldMetadata:
		return m.Metadata()
	case procedure.FieldManifest:
		return m.Manifest()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcedureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case procedure.FieldName:
		return m.OldName(ctx)
	case procedure.FieldDescription:
		return m.OldDescription(ctx)
	case procedure.FieldMetadata:
		return m.OldMetadata(ctx)
	case procedure.FieldManifest:
		return m.OldManifest(ctx)
	}
	return nil, fmt.Errorf("unknown Procedure field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcedureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case procedure.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case procedure.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case procedure.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case procedure.FieldManifest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManifest(v)
		return nil
	}
	return fmt.Errorf("unknown Procedure field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcedureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcedureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcedureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Procedure numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcedureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcedureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcedureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Procedure nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcedureMutation) ResetField(name string) error {
	switch name {
	case procedure.FieldName:
		m.ResetName()
		return nil
	case procedure.FieldDescription:
		m.ResetDescription()
		return nil
	case procedure.FieldMetadata:
		m.ResetMetadata()
		return nil
	case procedure.FieldManifest:
		m.ResetManifest()
		return nil
	}
	return fmt.Errorf("unknown Procedure field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcedureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcedureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcedureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcedureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcedureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcedureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcedureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Procedure unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcedureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Procedure edge %s", name)
}
