// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.pitagora/pkg/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.pitagora/pkg/ent/automation"
	"github.pitagora/pkg/ent/macro"
	"github.pitagora/pkg/ent/procedure"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Automation is the client for interacting with the Automation builders.
	Automation *AutomationClient
	// Macro is the client for interacting with the Macro builders.
	Macro *MacroClient
	// Procedure is the client for interacting with the Procedure builders.
	Procedure *ProcedureClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Automation = NewAutomationClient(c.config)
	c.Macro = NewMacroClient(c.config)
	c.Procedure = NewProcedureClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Automation: NewAutomationClient(cfg),
		Macro:      NewMacroClient(cfg),
		Procedure:  NewProcedureClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Automation: NewAutomationClient(cfg),
		Macro:      NewMacroClient(cfg),
		Procedure:  NewProcedureClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Automation.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Automation.Use(hooks...)
	c.Macro.Use(hooks...)
	c.Procedure.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Automation.Intercept(interceptors...)
	c.Macro.Intercept(interceptors...)
	c.Procedure.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AutomationMutation:
		return c.Automation.mutate(ctx, m)
	case *MacroMutation:
		return c.Macro.mutate(ctx, m)
	case *ProcedureMutation:
		return c.Procedure.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AutomationClient is a client for the Automation schema.
type AutomationClient struct {
	config
}

// NewAutomationClient returns a client for the Automation from the given config.
func NewAutomationClient(c config) *AutomationClient {
	return &AutomationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `automation.Hooks(f(g(h())))`.
func (c *AutomationClient) Use(hooks ...Hook) {
	c.hooks.Automation = append(c.hooks.Automation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `automation.Intercept(f(g(h())))`.
func (c *AutomationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Automation = append(c.inters.Automation, interceptors...)
}

// Create returns a builder for creating a Automation entity.
func (c *AutomationClient) Create() *AutomationCreate {
	mutation := newAutomationMutation(c.config, OpCreate)
	return &AutomationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Automation entities.
func (c *AutomationClient) CreateBulk(builders ...*AutomationCreate) *AutomationCreateBulk {
	return &AutomationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AutomationClient) MapCreateBulk(slice any, setFunc func(*AutomationCreate, int)) *AutomationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AutomationCreateBulk{err: fmt.Errorf("calling to AutomationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AutomationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AutomationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Automation.
func (c *AutomationClient) Update() *AutomationUpdate {
	mutation := newAutomationMutation(c.config, OpUpdate)
	return &AutomationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AutomationClient) UpdateOne(a *Automation) *AutomationUpdateOne {
	mutation := newAutomationMutation(c.config, OpUpdateOne, withAutomation(a))
	return &AutomationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AutomationClient) UpdateOneID(id int64) *AutomationUpdateOne {
	mutation := newAutomationMutation(c.config, OpUpdateOne, withAutomationID(id))
	return &AutomationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Automation.
func (c *AutomationClient) Delete() *AutomationDelete {
	mutation := newAutomationMutation(c.config, OpDelete)
	return &AutomationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AutomationClient) DeleteOne(a *Automation) *AutomationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AutomationClient) DeleteOneID(id int64) *AutomationDeleteOne {
	builder := c.Delete().Where(automation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AutomationDeleteOne{builder}
}

// Query returns a query builder for Automation.
func (c *AutomationClient) Query() *AutomationQuery {
	return &AutomationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAutomation},
		inters: c.Interceptors(),
	}
}

// Get returns a Automation entity by its id.
func (c *AutomationClient) Get(ctx context.Context, id int64) (*Automation, error) {
	return c.Query().Where(automation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AutomationClient) GetX(ctx context.Context, id int64) *Automation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AutomationClient) Hooks() []Hook {
	return c.hooks.Automation
}

// Interceptors returns the client interceptors.
func (c *AutomationClient) Interceptors() []Interceptor {
	return c.inters.Automation
}

func (c *AutomationClient) mutate(ctx context.Context, m *AutomationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AutomationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AutomationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AutomationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AutomationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Automation mutation op: %q", m.Op())
	}
}

// MacroClient is a client for the Macro schema.
type MacroClient struct {
	config
}

// NewMacroClient returns a client for the Macro from the given config.
func NewMacroClient(c config) *MacroClient {
	return &MacroClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `macro.Hooks(f(g(h())))`.
func (c *MacroClient) Use(hooks ...Hook) {
	c.hooks.Macro = append(c.hooks.Macro, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `macro.Intercept(f(g(h())))`.
func (c *MacroClient) Intercept(interceptors ...Interceptor) {
	c.inters.Macro = append(c.inters.Macro, interceptors...)
}

// Create returns a builder for creating a Macro entity.
func (c *MacroClient) Create() *MacroCreate {
	mutation := newMacroMutation(c.config, OpCreate)
	return &MacroCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Macro entities.
func (c *MacroClient) CreateBulk(builders ...*MacroCreate) *MacroCreateBulk {
	return &MacroCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MacroClient) MapCreateBulk(slice any, setFunc func(*MacroCreate, int)) *MacroCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MacroCreateBulk{err: fmt.Errorf("calling to MacroClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MacroCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MacroCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Macro.
func (c *MacroClient) Update() *MacroUpdate {
	mutation := newMacroMutation(c.config, OpUpdate)
	return &MacroUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MacroClient) UpdateOne(m *Macro) *MacroUpdateOne {
	mutation := newMacroMutation(c.config, OpUpdateOne, withMacro(m))
	return &MacroUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MacroClient) UpdateOneID(id int64) *MacroUpdateOne {
	mutation := newMacroMutation(c.config, OpUpdateOne, withMacroID(id))
	return &MacroUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Macro.
func (c *MacroClient) Delete() *MacroDelete {
	mutation := newMacroMutation(c.config, OpDelete)
	return &MacroDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MacroClient) DeleteOne(m *Macro) *MacroDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MacroClient) DeleteOneID(id int64) *MacroDeleteOne {
	builder := c.Delete().Where(macro.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MacroDeleteOne{builder}
}

// Query returns a query builder for Macro.
func (c *MacroClient) Query() *MacroQuery {
	return &MacroQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMacro},
		inters: c.Interceptors(),
	}
}

// Get returns a Macro entity by its id.
func (c *MacroClient) Get(ctx context.Context, id int64) (*Macro, error) {
	return c.Query().Where(macro.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MacroClient) GetX(ctx context.Context, id int64) *Macro {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MacroClient) Hooks() []Hook {
	return c.hooks.Macro
}

// Interceptors returns the client interceptors.
func (c *MacroClient) Interceptors() []Interceptor {
	return c.inters.Macro
}

func (c *MacroClient) mutate(ctx context.Context, m *MacroMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MacroCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MacroUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MacroUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MacroDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Macro mutation op: %q", m.Op())
	}
}

// ProcedureClient is a client for the Procedure schema.
type ProcedureClient struct {
	config
}

// NewProcedureClient returns a client for the Procedure from the given config.
func NewProcedureClient(c config) *ProcedureClient {
	return &ProcedureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `procedure.Hooks(f(g(h())))`.
func (c *ProcedureClient) Use(hooks ...Hook) {
	c.hooks.Procedure = append(c.hooks.Procedure, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `procedure.Intercept(f(g(h())))`.
func (c *ProcedureClient) Intercept(interceptors ...Interceptor) {
	c.inters.Procedure = append(c.inters.Procedure, interceptors...)
}

// Create returns a builder for creating a Procedure entity.
func (c *ProcedureClient) Create() *ProcedureCreate {
	mutation := newProcedureMutation(c.config, OpCreate)
	return &ProcedureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Procedure entities.
func (c *ProcedureClient) CreateBulk(builders ...*ProcedureCreate) *ProcedureCreateBulk {
	return &ProcedureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcedureClient) MapCreateBulk(slice any, setFunc func(*ProcedureCreate, int)) *ProcedureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcedureCreateBulk{err: fmt.Errorf("calling to ProcedureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcedureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcedureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Procedure.
func (c *ProcedureClient) Update() *ProcedureUpdate {
	mutation := newProcedureMutation(c.config, OpUpdate)
	return &ProcedureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcedureClient) UpdateOne(pr *Procedure) *ProcedureUpdateOne {
	mutation := newProcedureMutation(c.config, OpUpdateOne, withProcedure(pr))
	return &ProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcedureClient) UpdateOneID(id int64) *ProcedureUpdateOne {
	mutation := newProcedureMutation(c.config, OpUpdateOne, withProcedureID(id))
	return &ProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Procedure.
func (c *ProcedureClient) Delete() *ProcedureDelete {
	mutation := newProcedureMutation(c.config, OpDelete)
	return &ProcedureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcedureClient) DeleteOne(pr *Procedure) *ProcedureDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcedureClient) DeleteOneID(id int64) *ProcedureDeleteOne {
	builder := c.Delete().Where(procedure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcedureDeleteOne{builder}
}

// Query returns a query builder for Procedure.
func (c *ProcedureClient) Query() *ProcedureQuery {
	return &ProcedureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcedure},
		inters: c.Interceptors(),
	}
}

// Get returns a Procedure entity by its id.
func (c *ProcedureClient) Get(ctx context.Context, id int64) (*Procedure, error) {
	return c.Query().Where(procedure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcedureClient) GetX(ctx context.Context, id int64) *Procedure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcedureClient) Hooks() []Hook {
	return c.hooks.Procedure
}

// Interceptors returns the client interceptors.
func (c *ProcedureClient) Interceptors() []Interceptor {
	return c.inters.Procedure
}

func (c *ProcedureClient) mutate(ctx context.Context, m *ProcedureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcedureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcedureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcedureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Procedure mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Automation, Macro, Procedure []ent.Hook
	}
	inters struct {
		Automation, Macro, Procedure []ent.Interceptor
	}
)
