// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.pitagora/pkg/ent/macro"
)

// MacroCreate is the builder for creating a Macro entity.
type MacroCreate struct {
	config
	mutation *MacroMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mc *MacroCreate) SetName(s string) *MacroCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetDescription sets the "description" field.
func (mc *MacroCreate) SetDescription(s string) *MacroCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetMetadata sets the "metadata" field.
func (mc *MacroCreate) SetMetadata(s string) *MacroCreate {
	mc.mutation.SetMetadata(s)
	return mc
}

// SetCode sets the "code" field.
func (mc *MacroCreate) SetCode(s string) *MacroCreate {
	mc.mutation.SetCode(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MacroCreate) SetID(i int64) *MacroCreate {
	mc.mutation.SetID(i)
	return mc
}

// Mutation returns the MacroMutation object of the builder.
func (mc *MacroCreate) Mutation() *MacroMutation {
	return mc.mutation
}

// Save creates the Macro in the database.
func (mc *MacroCreate) Save(ctx context.Context) (*Macro, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MacroCreate) SaveX(ctx context.Context) *Macro {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MacroCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MacroCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MacroCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Macro.name"`)}
	}
	if _, ok := mc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Macro.description"`)}
	}
	if _, ok := mc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Macro.metadata"`)}
	}
	if _, ok := mc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Macro.code"`)}
	}
	return nil
}

func (mc *MacroCreate) sqlSave(ctx context.Context) (*Macro, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MacroCreate) createSpec() (*Macro, *sqlgraph.CreateSpec) {
	var (
		_node = &Macro{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(macro.Table, sqlgraph.NewFieldSpec(macro.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(macro.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(macro.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.Metadata(); ok {
		_spec.SetField(macro.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := mc.mutation.Code(); ok {
		_spec.SetField(macro.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Macro.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MacroUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mc *MacroCreate) OnConflict(opts ...sql.ConflictOption) *MacroUpsertOne {
	mc.conflict = opts
	return &MacroUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Macro.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MacroCreate) OnConflictColumns(columns ...string) *MacroUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MacroUpsertOne{
		create: mc,
	}
}

type (
	// MacroUpsertOne is the builder for "upsert"-ing
	//  one Macro node.
	MacroUpsertOne struct {
		create *MacroCreate
	}

	// MacroUpsert is the "OnConflict" setter.
	MacroUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *MacroUpsert) SetDescription(v string) *MacroUpsert {
	u.Set(macro.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MacroUpsert) UpdateDescription() *MacroUpsert {
	u.SetExcluded(macro.FieldDescription)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *MacroUpsert) SetMetadata(v string) *MacroUpsert {
	u.Set(macro.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MacroUpsert) UpdateMetadata() *MacroUpsert {
	u.SetExcluded(macro.FieldMetadata)
	return u
}

// SetCode sets the "code" field.
func (u *MacroUpsert) SetCode(v string) *MacroUpsert {
	u.Set(macro.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *MacroUpsert) UpdateCode() *MacroUpsert {
	u.SetExcluded(macro.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Macro.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(macro.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MacroUpsertOne) UpdateNewValues() *MacroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(macro.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(macro.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Macro.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MacroUpsertOne) Ignore() *MacroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MacroUpsertOne) DoNothing() *MacroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MacroCreate.OnConflict
// documentation for more info.
func (u *MacroUpsertOne) Update(set func(*MacroUpsert)) *MacroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MacroUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *MacroUpsertOne) SetDescription(v string) *MacroUpsertOne {
	return u.Update(func(s *MacroUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MacroUpsertOne) UpdateDescription() *MacroUpsertOne {
	return u.Update(func(s *MacroUpsert) {
		s.UpdateDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *MacroUpsertOne) SetMetadata(v string) *MacroUpsertOne {
	return u.Update(func(s *MacroUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MacroUpsertOne) UpdateMetadata() *MacroUpsertOne {
	return u.Update(func(s *MacroUpsert) {
		s.UpdateMetadata()
	})
}

// SetCode sets the "code" field.
func (u *MacroUpsertOne) SetCode(v string) *MacroUpsertOne {
	return u.Update(func(s *MacroUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *MacroUpsertOne) UpdateCode() *MacroUpsertOne {
	return u.Update(func(s *MacroUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *MacroUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MacroCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MacroUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MacroUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MacroUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MacroCreateBulk is the builder for creating many Macro entities in bulk.
type MacroCreateBulk struct {
	config
	err      error
	builders []*MacroCreate
	conflict []sql.ConflictOption
}

// Save creates the Macro entities in the database.
func (mcb *MacroCreateBulk) Save(ctx context.Context) ([]*Macro, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Macro, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MacroMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MacroCreateBulk) SaveX(ctx context.Context) []*Macro {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MacroCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MacroCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Macro.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MacroUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mcb *MacroCreateBulk) OnConflict(opts ...sql.ConflictOption) *MacroUpsertBulk {
	mcb.conflict = opts
	return &MacroUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Macro.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MacroCreateBulk) OnConflictColumns(columns ...string) *MacroUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MacroUpsertBulk{
		create: mcb,
	}
}

// MacroUpsertBulk is the builder for "upsert"-ing
// a bulk of Macro nodes.
type MacroUpsertBulk struct {
	create *MacroCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Macro.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(macro.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MacroUpsertBulk) UpdateNewValues() *MacroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(macro.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(macro.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Macro.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MacroUpsertBulk) Ignore() *MacroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MacroUpsertBulk) DoNothing() *MacroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MacroCreateBulk.OnConflict
// documentation for more info.
func (u *MacroUpsertBulk) Update(set func(*MacroUpsert)) *MacroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MacroUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *MacroUpsertBulk) SetDescription(v string) *MacroUpsertBulk {
	return u.Update(func(s *MacroUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MacroUpsertBulk) UpdateDescription() *MacroUpsertBulk {
	return u.Update(func(s *MacroUpsert) {
		s.UpdateDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *MacroUpsertBulk) SetMetadata(v string) *MacroUpsertBulk {
	return u.Update(func(s *MacroUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MacroUpsertBulk) UpdateMetadata() *MacroUpsertBulk {
	return u.Update(func(s *MacroUpsert) {
		s.UpdateMetadata()
	})
}

// SetCode sets the "code" field.
func (u *MacroUpsertBulk) SetCode(v string) *MacroUpsertBulk {
	return u.Update(func(s *MacroUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *MacroUpsertBulk) UpdateCode() *MacroUpsertBulk {
	return u.Update(func(s *MacroUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *MacroUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MacroCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MacroCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MacroUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
