// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.pitagora/pkg/ent/procedure"
)

// ProcedureCreate is the builder for creating a Procedure entity.
type ProcedureCreate struct {
	config
	mutation *ProcedureMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pc *ProcedureCreate) SetName(s string) *ProcedureCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProcedureCreate) SetDescription(s string) *ProcedureCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetMetadata sets the "metadata" field.
func (pc *ProcedureCreate) SetMetadata(s string) *ProcedureCreate {
	pc.mutation.SetMetadata(s)
	return pc
}

// SetManifest sets the "manifest" field.
func (pc *ProcedureCreate) SetManifest(s string) *ProcedureCreate {
	pc.mutation.SetManifest(s)
	return pc
}

// SetID sets the "id" field.
func (pc *ProcedureCreate) SetID(i int64) *ProcedureCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the ProcedureMutation object of the builder.
func (pc *ProcedureCreate) Mutation() *ProcedureMutation {
	return pc.mutation
}

// Save creates the Procedure in the database.
func (pc *ProcedureCreate) Save(ctx context.Context) (*Procedure, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcedureCreate) SaveX(ctx context.Context) *Procedure {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcedureCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcedureCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcedureCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Procedure.name"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Procedure.description"`)}
	}
	if _, ok := pc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Procedure.metadata"`)}
	}
	if _, ok := pc.mutation.Manifest(); !ok {
		return &ValidationError{Name: "manifest", err: errors.New(`ent: missing required field "Procedure.manifest"`)}
	}
	return nil
}

func (pc *ProcedureCreate) sqlSave(ctx context.Context) (*Procedure, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProcedureCreate) createSpec() (*Procedure, *sqlgraph.CreateSpec) {
	var (
		_node = &Procedure{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(procedure.Table, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(procedure.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Metadata(); ok {
		_spec.SetField(procedure.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := pc.mutation.Manifest(); ok {
		_spec.SetField(procedure.FieldManifest, field.TypeString, value)
		_node.Manifest = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Procedure.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcedureUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pc *ProcedureCreate) OnConflict(opts ...sql.ConflictOption) *ProcedureUpsertOne {
	pc.conflict = opts
	return &ProcedureUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Procedure.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProcedureCreate) OnConflictColumns(columns ...string) *ProcedureUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProcedureUpsertOne{
		create: pc,
	}
}

type (
	// ProcedureUpsertOne is the builder for "upsert"-ing
	//  one Procedure node.
	ProcedureUpsertOne struct {
		create *ProcedureCreate
	}

	// ProcedureUpsert is the "OnConflict" setter.
	ProcedureUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *ProcedureUpsert) SetDescription(v string) *ProcedureUpsert {
	u.Set(procedure.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProcedureUpsert) UpdateDescription() *ProcedureUpsert {
	u.SetExcluded(procedure.FieldDescription)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ProcedureUpsert) SetMetadata(v string) *ProcedureUpsert {
	u.Set(procedure.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProcedureUpsert) UpdateMetadata() *ProcedureUpsert {
	u.SetExcluded(procedure.FieldMetadata)
	return u
}

// SetManifest sets the "manifest" field.
func (u *ProcedureUpsert) SetManifest(v string) *ProcedureUpsert {
	u.Set(procedure.FieldManifest, v)
	return u
}

// UpdateManifest sets the "manifest" field to the value that was provided on create.
func (u *ProcedureUpsert) UpdateManifest() *ProcedureUpsert {
	u.SetExcluded(procedure.FieldManifest)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Procedure.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(procedure.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProcedureUpsertOne) UpdateNewValues() *ProcedureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(procedure.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(procedure.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Procedure.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProcedureUpsertOne) Ignore() *ProcedureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcedureUpsertOne) DoNothing() *ProcedureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcedureCreate.OnConflict
// documentation for more info.
func (u *ProcedureUpsertOne) Update(set func(*ProcedureUpsert)) *ProcedureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcedureUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ProcedureUpsertOne) SetDescription(v string) *ProcedureUpsertOne {
	return u.Update(func(s *ProcedureUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProcedureUpsertOne) UpdateDescription() *ProcedureUpsertOne {
	return u.Update(func(s *ProcedureUpsert) {
		s.UpdateDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ProcedureUpsertOne) SetMetadata(v string) *ProcedureUpsertOne {
	return u.Update(func(s *ProcedureUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProcedureUpsertOne) UpdateMetadata() *ProcedureUpsertOne {
	return u.Update(func(s *ProcedureUpsert) {
		s.UpdateMetadata()
	})
}

// SetManifest sets the "manifest" field.
func (u *ProcedureUpsertOne) SetManifest(v string) *ProcedureUpsertOne {
	return u.Update(func(s *ProcedureUpsert) {
		s.SetManifest(v)
	})
}

// UpdateManifest sets the "manifest" field to the value that was provided on create.
func (u *ProcedureUpsertOne) UpdateManifest() *ProcedureUpsertOne {
	return u.Update(func(s *ProcedureUpsert) {
		s.UpdateManifest()
	})
}

// Exec executes the query.
func (u *ProcedureUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcedureCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcedureUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProcedureUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProcedureUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProcedureCreateBulk is the builder for creating many Procedure entities in bulk.
type ProcedureCreateBulk struct {
	config
	err      error
	builders []*ProcedureCreate
	conflict []sql.ConflictOption
}

// Save creates the Procedure entities in the database.
func (pcb *ProcedureCreateBulk) Save(ctx context.Context) ([]*Procedure, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Procedure, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcedureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcedureCreateBulk) SaveX(ctx context.Context) []*Procedure {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcedureCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcedureCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Procedure.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcedureUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProcedureCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProcedureUpsertBulk {
	pcb.conflict = opts
	return &ProcedureUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Procedure.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProcedureCreateBulk) OnConflictColumns(columns ...string) *ProcedureUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProcedureUpsertBulk{
		create: pcb,
	}
}

// ProcedureUpsertBulk is the builder for "upsert"-ing
// a bulk of Procedure nodes.
type ProcedureUpsertBulk struct {
	create *ProcedureCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Procedure.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(procedure.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProcedureUpsertBulk) UpdateNewValues() *ProcedureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(procedure.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(procedure.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Procedure.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProcedureUpsertBulk) Ignore() *ProcedureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcedureUpsertBulk) DoNothing() *ProcedureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcedureCreateBulk.OnConflict
// documentation for more info.
func (u *ProcedureUpsertBulk) Update(set func(*ProcedureUpsert)) *ProcedureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcedureUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ProcedureUpsertBulk) SetDescription(v string) *ProcedureUpsertBulk {
	return u.Update(func(s *ProcedureUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProcedureUpsertBulk) UpdateDescription() *ProcedureUpsertBulk {
	return u.Update(func(s *ProcedureUpsert) {
		s.UpdateDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ProcedureUpsertBulk) SetMetadata(v string) *ProcedureUpsertBulk {
	return u.Update(func(s *ProcedureUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProcedureUpsertBulk) UpdateMetadata() *ProcedureUpsertBulk {
	return u.Update(func(s *ProcedureUpsert) {
		s.UpdateMetadata()
	})
}

// SetManifest sets the "manifest" field.
func (u *ProcedureUpsertBulk) SetManifest(v string) *ProcedureUpsertBulk {
	return u.Update(func(s *ProcedureUpsert) {
		s.SetManifest(v)
	})
}

// UpdateManifest sets the "manifest" field to the value that was provided on create.
func (u *ProcedureUpsertBulk) UpdateManifest() *ProcedureUpsertBulk {
	return u.Update(func(s *ProcedureUpsert) {
		s.UpdateManifest()
	})
}

// Exec executes the query.
func (u *ProcedureUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProcedureCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcedureCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcedureUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
